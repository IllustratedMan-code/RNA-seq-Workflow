* R functions
:PROPERTIES:
:header-args: :tangle scripts/functions.r
:end:
** txi function
uses the tximport package to import the quant data
#+begin_src jupyter-R :session R
txi <- function(directory, quantdatafoldername, metadata, fishtype){
  library(tximport)
  setwd(directory)
  metadata <- read.csv(metadata, header=TRUE)
  files <- file.path(directory, quantdatafoldername, metadata$name)
  names(files) <- metadata$name
  genes <- read.table("genes2.tabular")
  txi <- tximport(files, type=fishtype, tx2gene=genes)
  return(list(txi, metadata))
}
#+end_src
** Initial Deseq Function
Sets up the deseq data set object and returns it
#+begin_src jupyter-R :session R
initialDeseq <- function(txi, metadata, design=~part + pesticides){
  library(DESeq2)
  # Deseq2 dataset from tximport
  data <- DESeqDataSetFromTximport(txi, colData=metadata, design = design)
  Deseq <- DESeq(data)
  results <- results(Deseq)
  print(summary(results))
  return(list(Deseq, results))
}
#+end_src
** ReDeseq
sets up the deseq object with a different design criteria
#+begin_src jupyter-R :session R
reDeseq <- function(dds){
  ddsMF <- dds
  design(ddsMF) <- formula(~pesticides)
  ddsMF <- DESeq(ddsMF)
  Mres <- results(ddsMF)
  return(list(ddsMf, Mres))
  }
#+end_src
** initialEdgeR
Sets up the EdgeR object and returns it.
#+begin_src jupyter-R :session R
initialEdgeR <- function(txi, meta){
  library(edgeR)
  # EdgR dataset from tximport
  counts <- txi$counts
  length <- txi$length
  normMat <- length / exp(rowMeans(log(length)))
  normCts <- counts / normMat
  eff.lib <- calcNormFactors(normCts) * colSums(normCts)
  normMat <- sweep(normMat, 2, eff.lib, "*")
  normMat <- log(normMat)
  y <- DGEList(counts)
  y <- scaleOffset(y, normMat)
  
  pest <- factor(meta$pesticides, levels=c("perm", "deet", "control"))
  part <- factor(meta$part, levels=c("leg", "body"))
  design <- model.matrix(~0 + pest + part)
  keep <- filterByExpr(y, design)
  EdgeR <- y[keep, ]
  return(list(EdgeR, design))
}
#+end_src
** estEdgeR
finds the fit of the data and returns it for further analysis
#+begin_src jupyter-R :session R
estEdgeR <- function(EdgeR, design){
  library(edgeR)
  y <- estimateGLMCommonDisp(EdgeR, design)
  y <- estimateGLMTrendedDisp(y, design)
  y <- estimateGLMTagwiseDisp(y, design)
  fit <- glmQLFit(y, design) 
  
  return(fit)
}
#+end_src

#+RESULTS:

* initial R step
** Setup Directory
** Deseq
:PROPERTIES:
:header-args: :tangle scripts/Deseq2-analysis.r
:end:
*** Package imports
#+begin_src jupyter-R :session R
vignette(package="dplyr")

rdata <- list.files(pattern="\\.Rdata")
args <- commandArgs(trailingOnly = TRUE)
if(length(args) > 0){
    if(args == "rerun"){
        print("rerunning data")
        r
    }
}
# general library imports ----
library(tximport)
library(readr)
library("pheatmap")
#+end_src
*** Tximport
#+begin_src jupyter-R :session R
#change these values to your own situations
directory <- "/home/david/Dropbox/LegsvBodyPesticide/DESEQ2"
quantdatafoldername <- "CorrectedQuantData"
fishtype <- "sailfish"
#+end_src
**** Convert quant files to txi object
#+begin_src jupyter-R :session R
# imports the genes as a tximport file
setwd(directory)
metadata <- read.csv("metadata.csv", header=TRUE)
files <- file.path(directory, quantdatafoldername, metadata$name)
names(files) <- metadata$name
genes <- read.table("genes2.tabular")
txi <- tximport(files, type=fishtype, tx2gene=genes)
#+end_src
*** Create the Deseq Object
#+begin_src jupyter-R :session R
library(DESeq2)
# Deseq2 dataset from tximport
data <- DESeqDataSetFromTximport(txi, colData=metadata, design = ~part + pesticides)
Deseq <- DESeq(data)
results <- results(Deseq)
#+end_src
*** Do initial data manipulation
#+begin_src jupyter-R :session R
## hello
dds <- Deseq
#* vsd ntd rld
vsd <- vst(dds, blind=FALSE)
rld <- rlog(dds, blind=FALSE)
ntd <- normTransform(dds)

ddsMF <- dds
design(ddsMF) <- formula(~pesticides)
ddsMF <- DESeq(ddsMF)
Mres <- results(ddsMF)
#+end_src
*** Initial selection of the data
+ p value of less than 0.01
+ Leg is compared to body, therefore down-regulated are up-regulated in body
#+begin_src jupyter-R :session R
DR <- Mres[ which(Mres$padj < 0.01), ]
Body <- DR[which(DR$log2FoldChange < -2),]
Leg <- DR[which(DR$log2FoldChange > 2), ]
#+end_src
*** Save lists of the respective up-regulated genes
#+begin_src jupyter-R :session R
write.table(rownames(Body), file="Genes/Body.csv", quote=FALSE, col.names=FALSE, row.names=FALSE, sep=",")
write.table(rownames(Leg), file="Genes/Leg.csv", quote=FALSE, col.names=FALSE, row.names=FALSE, sep=",")
#+end_src
*** Create a new analysis design
#+begin_src jupyter-R :session R
newdd <- dds
design(newdd) <- formula(~part + part:pesticides)
newdd <- DESeq(newdd)
newres <- results(newdd)
#+end_src
*** Prepare the data for pheatmap plotting
#+begin_src jupyter-R :session R
select <- order(rowMeans(counts(dds, normalized=FALSE)), decreasing = TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("pesticides","part")])
#+end_src
*** Integrity plots
#+begin_src jupyter-R :session R
jpeg("generalfigures/plotMA_deseq.jpg")
plotMA(results)
dev.off()

jpeg("generalfigures/plotcounts_deseq.jpg")
plotCounts(data, gene=which.min(results$padj), intgroup = "part")
dev.off()

jpeg("generalfigures/meanSdvsd_deseq.jpg")
vsn::meanSdPlot(assay(vsd))
dev.off()

jpeg("generalfigures/meadnSdrld_deseq.jpg")
vsn::meanSdPlot(assay(rld))
dev.off()

jpeg("generalfigures/meanSdntd_deseq.jpg")
vsn::meanSdPlot(assay(ntd))
dev.off()

jpeg("generalfigures/pcaplot_deseq.jpg", width = 800, height=800)
plotPCA(vsd, intgroup=c("part", "pesticides"))
dev.off()

jpeg("generalfigures/pheatmapplotntd.jpg", width=800, height=800)
pheatmap(assay(ntd)[select,], cluster_rows=FALSE, show_rownames=TRUE, cluster_cols=TRUE, annotation_col=df)
dev.off()

jpeg("generalfigures/pheatmapplotvsd.jpg", width=800, height=800)
pheatmap(assay(vsd)[select,], cluster_rows=FALSE, show_rownames=TRUE, cluster_cols=FALSE, annotation_col=df)
dev.off()

jpeg("generalfigures/pheatmapplotrld.jpg", width=800, height=800)
pheatmap(assay(rld)[select,], cluster_rows=FALSE, show_rownames=TRUE, cluster_cols=FALSE, annotation_col=df)
dev.off()
#+end_src
*** Another Deseq Design
#+begin_src jupyter-R :session R

library(tidyverse)
vstarray <- assay(vsd)

range <- vstarray[]
names <- rownames(range)
maxs <- rowMaxs(range)
mins <- rowMins(range)

maxs <- maxs-mins
pt <- tibble(names, maxs)
pt
pt <- pt %>% filter(maxs > 10)
pt
ggplot(pt, aes(x=names, y= maxs)) + geom_col()
descending <- arrange(pt, desc(maxs))
descending <- factor(descending["maxs"])
descending <- tibble(row = seq(length(descending)), descending)
ggplot(descending, aes(x=row, y= descending)) + geom_col()

sum(results$padj < 0.05, na.rm=T)
res <- results
#+end_src
*** Altered Selection of genes
#+begin_src jupyter-R :session R

Upregulated <- res[ which(res$padj < 0.03 & res$log2FoldChange > 0), ]
DownRegulated <- res[ which(res$padj < 0.03 & res$log2FoldChange < 0), ]
DownRegulated[order(DownRegulated$padj), ]
head(DownRegulated$padj)
D <- rownames(DownRegulated)
Up <- rownames(Upregulated)
DR <- res[ which(res$padj < 0.03), ]
DR[order(DR$padj),]
#+end_src
*** Save new selection to file
#+begin_src jupyter-R :session R
write.table(D, file="Genes/DownRegulated.txt", quote=FALSE, col.names=FALSE, row.names=FALSE, sep=",")
write.table(Up, file="Genes/UpRegulated.txt", quote=FALSE, col.names=FALSE, row.names=FALSE, sep=",")
#+end_src
*** Extra integrity plot
#+begin_src jupyter-R :session R
d <- mcols(Deseq,use.names=TRUE)
a <- data.frame(rownumb = seq(nrow(d)), d)
a <- data.frame(rownumb = seq(nrow(d)), basemean = d[,1])
library(ggplot2)
ggplot(a, aes(x=rownumb, y=dispGeneEst)) + geom_point()
#+end_src
*** TODO Extra EdgeR for venn diagrams
This is mostly contained in the EdgeR section.
#+begin_src jupyter-R :session R

#! EdgeR section ----
library(edgeR)
# EdgR dataset from tximport
counts <- txi$counts
length <- txi$length
normMat <- length / exp(rowMeans(log(length)))
normCts <- counts / normMat
eff.lib <- calcNormFactors(normCts) * colSums(normCts)
normMat <- sweep(normMat, 2, eff.lib, "*")
normMat <- log(normMat)
y <- DGEList(counts)
y <- scaleOffset(y, normMat)



# EdgR heatmap
logcpm <- cpm(EdgeR)
meta <- read.csv("metadata.csv", sep= ",")
pest <- factor(meta$pesticides, levels=c("perm", "deet", "control"))
part <- factor(meta$part, levels=c("leg", "body"))
design <- model.matrix(~0 + pest + part)
design
keep <- filterByExpr(y, design)
EdgeR <- y[keep, ]
estimateDisp(EdgeR)
y <- estimateGLMCommonDisp(EdgeR, design)
y <- estimateGLMTrendedDisp(y, design)
y <- estimateGLMTagwiseDisp(y, design)
est <- estimateDisp(EdgeR, design, robust=TRUE)
design
fit <- glmQLFit(y, design)
lrt <- glmLRT(fit, coef=1:4)
test <- glmQLFTest(fit, coef=1:4)
lrc$PValue
lrt

test$logFC.pestperm - test$logFC.pestdeet

ggplot(test$table, aes(y=logFC.partleg, x=seq(nrow(test)))) + geom_hex()
#additional analysis----
table <- test$table
body <- table[table$logFC.partbody > 2, ]
leg <- table[table$logFC.partbody < -2, ]
table <- body
diff <- table$logFC.pestcontrol - table$logFC.pestdeet
library(tidyverse)
data <- tibble(data = diff, rows = seq(length(diff)))
ggplot(data, aes(x=rows, y=data)) + geom_point()
table$diff <- diff
cont <- table[table$diff > 2, ]
deet <- table[table$diff < -2, ]
diff2 <- table$logFC.pestcontrol - table$logFC.pestperm
table$diff2 <- diff2
cont2 <- table[table$diff2 > 2, ]
perm <- table[table$diff2 < -2, ]



library(VennDiagram)
futile.logger::flog.threshold(futile.logger::ERROR, name = "VennDiagramLogger")
Legcont1 <- cont
Legcont2 <- cont2
deet1 <- deet
perm1 <- perm
d <- data.frame(Pest = c(rep(c("DEET", "DEET", "PERM", "PERM"))),
                Part = c(rep("Body", 4), rep("Leg", 4)),
                Names = c(rep(c("Up Regulated", "Down Regulated"), 4)),
                GeneCount = c(nrow(deet), nrow(cont), nrow(perm), nrow(cont2), nrow(deet1), nrow(Legcont1), nrow(perm1), nrow(Legcont2)))

write.table(d, file="Genes/regulation.csv", quote=FALSE, col.names=TRUE, row.names=FALSE, sep=",")
write.table(rownames(perm), file="Genes/perm.csv", quote=FALSE, col.names=FALSE, row.names=FALSE, sep=",")

pl ggplot(d, aes(x=Names, y = GeneCount, fill=Names)) + geom_col()
venn.diagram(
  x = list(rownames(deet), rownames(cont)),
  category.names = c("DEET" , "Control"),
  filename = "Deetvcontorlvleg.png",
  compression = "lzw",


  lwd = 2,
  lty = 'blank',
  fill = c("red", "blue"),
)
grid.draw(tmp)

write.table(rownames(perm), file="Genes/perm.csv", quote=FALSE, col.names=FALSE, row.names=FALSE, sep=",")
write.table(rownames(deet), file="Genes/deet.csv", quote=FALSE, col.names=FALSE, row.names=FALSE, sep=",")
write.table(rownames(cont), file="Genes/deetcont.csv", quote=FALSE, col.names=FALSE, row.names=FALSE, sep=",")
write.table(rownames(cont2), file="Genes/permcont.csv", quote=FALSE, col.names=FALSE, row.names=FALSE, sep=",")

ggplot(contdata, aes(x=rows, y=data)) + geom_point()

rownames(cont)
# EdgeR plots ----
jpeg("generalfigures/BCVplot_edgeR.jpg")
plotBCV(est)
dev.off()

jpeg("generalfigures/QLDISP_edgeR.jpg")
plotQLDisp(fit)
dev.off()

jpeg("generalfigures/MDS_edgeR.jpg")
plotMDS(logcpm)
dev.off()


# jpeg("generalfigur>es/SpliceDGE_edgeR.jpg")
# plotSpliceDGE(logcpm)
# dev.off()

# end ----
library(matrixStats)
stats <- txi$abundance
tpm <- transform(stats, sd=rowSds(stats), avg=rowMeans(stats), median = rowMedians(stats))

dge <- DGEList(txi$counts)
cpm <- cpm(dge, log=TRUE)
head(cpm)
data.frame(cpm)
cpmtibble <- as_tibble(cpm, rownames="geneID")
cpmpivot <- pivot_longer(cpmtibble, cols=seq(2, ncol(cpmtibble)), names_to = "samples", values_to = "expression")



ggplot(tpm) +
  aes(x = sd, y = median) +
  geom_hex()

ggplot(tpm) +
  aes(x = sd, y = avg) +
  geom_point(shape=16, size=2) +
  geom_smooth(method=lm) +
  geom_hex() +
  labs(y="Median", x = "Standard deviation", title="Transcripts per million (TPM)", subtitle="unfiltered, non-normalized data") +
  theme_classic() +
  theme_dark() +
  theme_bw()

ggplot(cpmpivot) +
  aes(x=samples, y=expression, fill=samples) +
  geom_violin(trim = FALSE, show.legend = FALSE) +
  stat_summary(fun = "median",geom = "point",shape = 95,size = 10,color = "black",show.legend = FALSE) +
  labs(y="log2 expression", x = "sample",title="Log2 Counts per Million (CPM)",subtitle="unfiltered, non-normalized",caption=paste0("produced on ", Sys.time())) +
  theme_bw()

keepers <- rowSums(cpm > 1)>=3
table(rowSums(dge$counts==0)==10)


# venndiagrams ----

library(VennDiagram)


bodygenes <- names(Deseq)
bodygenes <- bodygenes[!bodygenes %in% rownames(Leg)]
leggenes <- names(Deseq)
leggenes <- leggenes[!leggenes %in% rownames(Body)]
names(Deseq) - rownames(Body)

#
bodyup <- table[table["partleg"] > 0]


# Venn Diagram 1----
futile.logger::flog.threshold(futile.logger::ERROR, name = "VennDiagramLogger")
venn.diagram(
  x = list(bodygenes, leggenes),
  category.names = c("Body" , "Leg"),

  filename = '14_venn_diagramm.png',
  output=FALSE,
  imagetype="png",
  compression="lzw",


  lwd = 2,
  lty = 'blank',
  fill = c("red", "blue"),
)


#+end_src
** EdgeR
:PROPERTIES:
:header-args: :tangle scripts/edgeR-Analysis.r
:end:
*** Initial settings
Directory and function setup, configure this when running the script
#+begin_src jupyter-R :session R
setwd("/home/david/Documents/BenoitLab/RNA-seq/")
source("scripts/functions.r")
directory <- "/home/david/Documents/BenoitLab/R/largeRNASEQ/"
quantdatafoldername <- "CorrectedQuantData"
fishtype <- "sailfish"
#+end_src

#+RESULTS:

*** Do the initial processing of the data
Imports the data and runs it through initial edgeR analysis using the functions created above
#+begin_src jupyter-R :session R
a <- txi(directory, quantdatafoldername, "metadata.csv", fishtype)
#De <- initialDeseq(a[[1]], a[[2]])
Ed <- initialEdgeR(a[[1]], a[[2]])
Eest <- estEdgeR(Ed[[1]], Ed[[2]])
lrt <- glmLRT(Eest, coef=1:4)
test <- glmQLFTest(Eest, coef=1:4)
#+end_src

#+RESULTS:
#+begin_example
reading in files with read_tsv

1 
2 
3 
4 
5 
6 
7 
8 
9 
10 
11 
12 
13 
14 
15 
16 
17 


summarizing abundance

summarizing counts

summarizing length

Loading required package: limma
#+end_example

*** Partion the data into body and leg tables
#+begin_src jupyter-R :session R
table <- test$table
body <- table[table$logFC.partbody > 2, ]
leg <- table[table$logFC.partbody < -2, ]
#+end_src

#+RESULTS:

*** Save the data tables to a file
Configure this to fit your computer
#+begin_src jupyter-R :session R
setwd("/home/david/Documents/BenoitLab/RNA-seq/")
write.table(table, file="edgeR-Genes/TotalExpr.csv", quote=FALSE, col.names=TRUE, row.names=TRUE, sep=",")
write.table(leg, file="edgeR-Genes/legExpr.csv", quote=FALSE, col.names=TRUE, row.names=TRUE, sep=",")
write.table(body, file="edgeR-Genes/bodyExpr.csv", quote=FALSE, col.names=TRUE, row.names=TRUE, sep=",")
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: Error in as.data.frame.default(x[[i]], optional = TRUE): cannot coerce class ‘"function"’ to a data.frame
: Traceback:
:
: 1. write.table(table, file = "edgeR-Genes/TotalExpr.csv", quote = FALSE,
:  .     col.names = TRUE, row.names = TRUE, sep = ",")
: 2. data.frame(x)
: 3. as.data.frame(x[[i]], optional = TRUE)
: 4. as.data.frame.default(x[[i]], optional = TRUE)
: 5. stop(gettextf("cannot coerce class %s to a data.frame", sQuote(deparse(class(x))[1L])),
:  .     domain = NA)
:END:

*** Find the relative expression values when compared to the control
#+begin_src jupyter-R :session R
deetvcontrol <- table$logFC.pestdeet - table$logFC.pestcontrol
permvcontrol <- table$logFC.pestperm - table$logFC.pestcontrol
deetvcontrolvbody <- body$logFC.pestdeet - body$logFC.pestcontrol
permvcontrolvbody <- body$logFC.pestperm - body$logFC.pestcontrol
deetvcontrolvleg <- leg$logFC.pestdeet - leg$logFC.pestcontrol
permvcontrolvleg <- leg$logFC.pestperm - leg$logFC.pestcontrol

table$deetvcontrol <- deetvcontrol
table$permvcontrol <- permvcontrol
body$deetvcontrol <- deetvcontrolvbody
body$permvcontrol <- permvcontrolvbody
leg$deetvcontrol <- deetvcontrolvleg
leg$permvcontrol <- permvcontrolvleg
#+end_src
*** Selection of the data
Selects only the columns that have an expression value greater than 2(up-regulated) or less than -2(down-regulated)
#+begin_src jupyter-R :session R
updeet <- table[table$deetvcontrol > 2,]
downdeet <- table[table$deetvcontrol < -2,]



updeetbody <- body[body$deetvcontrol > 2,]
downdeetbody <- body[body$deetvcontrol < -2,]
updeetleg <- leg[leg$deetvcontrol > 2,]
downdeetleg <- leg[leg$deetvcontrol < -2,]


upperm <- table[table$permvcontrol > 2,]
downperm <- table[table$permvcontrol < -2,]
uppermbody <- body[body$permvcontrol > 2,]
downpermbody <- body[body$permvcontrol < -2,]
uppermleg <- leg[leg$permvcontrol > 2,]
downpermleg <- leg[leg$permvcontrol < -2,]
#+end_src
*** Create a csv for venn diagram plotting
#+begin_src jupyter-R :session R
d <- data.frame(Pest = c(rep(c("DEET", "DEET", "PERM", "PERM"))),
                Part = c(rep("Body", 4), rep("Leg", 4)),
                Names = c(rep(c("Up Regulated", "Down Regulated"), 4)),
                GeneCount = c(nrow(downdeetbody), nrow(updeetbody), nrow(downpermbody), nrow(uppermbody), nrow(downdeetleg), nrow(updeetleg), nrow(downpermleg), nrow(uppermleg)))
#+end_src
*** Save the venn diagram csv
#+begin_src jupyter-R :session R
write.table(d, file="edgeR-Genes/venn-regulation.csv", quote=FALSE, col.names=TRUE, row.names=FALSE, sep=",")
#+end_src
*** Gets the row-names
#+begin_src jupyter-R :session R
upperm <- table[table$permvcontrol > 2,]
downperm <- table[table$permvcontrol < -2,]
uppermbody <- body[body$permvcontrol > 2,]
downpermbody <- body[body$permvcontrol < -2,]
uppermleg <- leg[leg$permvcontrol > 2,]
downpermleg <- leg[leg$permvcontrol < -2,]

uppermgenes <- rownames(upperm)
downpermgenes <- rownames(downperm)
uppermleggenes <- rownames(uppermleg)
downpermleggenes <- rownames(downpermleg)
uppermbodygenes <- rownames(uppermbody)
downpermbodygenes <- rownames(downpermbody)

updeetgenes <- rownames(updeet)
downdeetgenes <- rownames(downdeet)
updeetleggenes <- rownames(updeetleg)
downdeetleggenes <- rownames(downdeetleg)
updeetbodygenes <- rownames(updeetbody)
downdeetbodygenes <- rownames(downdeetbody)
#+end_src

*** Create a list of dataframes corresponding to the total, leg, and body
#+begin_src jupyter-R :session R
genelist <- list(upPerm = uppermgenes, downPerm = downpermgenes,
                upPermBody=uppermbodygenes, downPermBody=downpermbodygenes,
                upPermLeg = uppermleggenes, downPermLeg = downpermleggenes,
                upDeet = updeetgenes, downDeet = downdeetgenes,
                upDeetLeg = updeetleggenes, downDeetLeg = downdeetleggenes,
                upDeetBody = updeetbodygenes, downDeetBody = downdeetbodygenes, table=rownames(table), leg=rownames(leg), body=rownames(body))
#+end_src
*** Save the genelist to files
#+begin_src jupyter-R :session R
for (i in seq(length(genelist))){
    namelist <- names(genelist)
    write.table(genelist[i], file=paste("edgeR-Genes/Genelists","/", namelist[i], ".csv", sep=""), quote=FALSE, col.names=FALSE, row.names=FALSE, sep=",")
}
#+end_src
* Fasta Manipulation
** Get Gene names
This program just pulls the names of the genes out of the fasta file. There are probably less messy ways to do this.
#+begin_src cpp :tangle scripts/geneextract.cpp
#include <iostream>
#include <fstream>
#include <string>
#include <vector>

int main(){
    std::ifstream in;
    in.open("GeneReference/genelist.fasta");
    std::string line;
    std::ofstream out;
    out.open("GeneReference/listofgenes.csv");
    if (in.is_open()){
        while(getline(in, line)){
            if (line[0] == '>'){
                line.erase(0, 1);
                out << line << std::endl;
            }
        }
    }
}
#+end_src

#+RESULTS:

* Blast step
* Plotting step
** Venn Diagrams
:PROPERTIES:
:header-args: :tangle scripts/Venn.py
:end:
*** Imports
Change directory based on project
#+begin_src jupyter-python :session py
import matplotlib.pyplot as plt
from matplotlib_venn import venn2, venn2_circles, venn2_unweighted
import pandas as pd
import numpy as np
import os
os.chdir("/home/david/Documents/BenoitLab/RNA-seq")
#+end_src
*** Venn 1
#+begin_src jupyter-python :session py
data = pd.read_csv("edgeR-Genes/venn-regulation.csv")
plt.style.use("ggplot")
fig, axes = plt.subplots(1, 4)


i = 0

maximum = data["GeneCount"].max()

for pest in data["Part"].unique():
    pestdata = data[data["Part"] == pest]
    for part in pestdata["Pest"].unique():
        partdata = pestdata[pestdata["Pest"] == part]
        x = partdata["Names"]
        y = partdata["GeneCount"]
        axes[i].bar(x, y, color=["r", "b"])
        axes[i].set_xticks(partdata["Names"])
        axes[i].set_ylim(0, maximum)
        if i != 0:
            axes[i].get_yaxis().set_visible(False)
        axes[i].set_xlabel(part + "\n" + pest)
        axes[0].set_ylabel("Gene Count")

        i += 1
fig.suptitle("Gene Regulation")
fig.savefig("fig.png", bbox_inches="tight", dpi=250)
#+end_src
*** Venn 2
#+begin_src jupyter-python :session py
plt.style.use("ggplot")

from matplotlib_venn import venn2, venn2_circles, venn2_unweighted
from matplotlib_venn import venn3, venn3_circles


deet = pd.read_csv("Genes/deet.csv", header=None)
deetcont = pd.read_csv("Genes/deetcont.csv", header=None)
perm = pd.read_csv("Genes/perm.csv", header=None)
permcont = pd.read_csv("Genes/permcont.csv", header=None)
genes = pd.read_csv("Genes/listofgenes.csv", header=None)
def compare(s1, s2):
    c = len(list(set(s1.iloc[:, 0]) & set(s2.iloc[:, 0])))
    return(c)

diff = compare(deet, genes)
len(deet)
fig, axes = plt.subplots(2)
v1 = venn2_unweighted(subsets=(len(deet), len(deetcont), len(genes)-len(deetcont)-len(deet)), set_labels=("Up Regulated", "Down Regulated"), ax=axes[0])
v2 = venn2_unweighted(subsets=(len(perm), len(permcont), len(genes)-len(permcont)-len(perm)), set_labels=("Up Regulated", "Down Regulated"), ax=axes[1])
axes[0].set_title("Deet")
axes[1].set_title("Perm")
fig.tight_layout()
fig.savefig("VennDiagrams/RevisedDiagrams/DeetnPerm.png", bbox_inxhes="tight", dpi=250)
plt.show()
#+end_src
*** Venn 3
#+begin_src jupyter-python :session py
genes = pd.read_csv("GeneReference/listofgenes.csv", header=None)
body = pd.read_csv("GeneReference/Body.csv")
leg = pd.read_csv("GeneReference/Leg.csv")

fig, axes = plt.subplots()

v = venn2_unweighted(subsets=(len(body), len(leg),len(genes)-len(leg) - len(body)), set_labels=("Body", "Leg"), ax=axes)

axes.set_title("Leg vs Body")
fig.tight_layout()
fig.savefig("figures/BodyvsLeg.png", bbox_inxhes="tight", dpi=250)
fig.savefig("figures/BodyvsLeg.pdf", bbox_inxhes="tight", dpi=250)

plt.show()
#+end_src
*** Venn 4
#+begin_src jupyter-python :session py
genes = pd.read_csv("Genes/listofgenes.csv", header=None)
body = pd.read_csv("Genes/Body.csv")
upDeetBody = pd.read_csv("Genes/Genelists/upDeetBody.csv")
downDeetBody = pd.read_csv("Genes/Genelists/downDeetBody.csv")


fig, axes = plt.subplots()

v = venn2_unweighted(subsets=(len(upDeetBody), len(downDeetBody), len(body)- len(upDeetBody)-len(downDeetBody)), set_labels=("Up Regulated", "Down Regulated"), ax=axes)
axes.set_title("Deet Expression in Body Genes")
fig.tight_layout()
fig.savefig("VennDiagrams/RevisedDiagrams/DeetBody.png")
plt.show()
#+end_src
*** Venn 5
#+begin_src jupyter-python :session py
leg = pd.read_csv("Genes/Leg.csv")
upDeetLeg = pd.read_csv("Genes/Genelists/upDeetLeg.csv")
downDeetLeg = pd.read_csv("Genes/Genelists/downDeetLeg.csv")

fig, axes = plt.subplots()
v = venn2_unweighted(subsets=(len(upDeetLeg), len(downDeetLeg), len(leg)-len(upDeetLeg)-len(downDeetLeg)), set_labels=("Up Regulated", "Down Regulated"), ax=axes)
axes.set_title("Deet Expression in Leg Genes")
fig.tight_layout()
fig.savefig("VennDiagrams/RevisedDiagrams/DeetLeg.png")
#+end_src
*** Venn 6
#+begin_src jupyter-python :session py
leg = pd.read_csv("Genes/Leg.csv")
upPermLeg = pd.read_csv("Genes/Genelists/upPermLeg.csv")
downPermLeg = pd.read_csv("Genes/Genelists/downPermLeg.csv")

fig, axes = plt.subplots()
v = venn2_unweighted(subsets=(len(upPermLeg), len(downPermLeg), len(leg)-len(downPermLeg)-len(upPermLeg)), set_labels=("Up Regulated", "Down Regulated"), ax=axes)
axes.set_title("Perm Expression in Leg Genes")
fig.tight_layout()
fig.savefig("VennDiagrams/RevisedDiagrams/PermLeg.png")
#+end_src
*** Venn 7
#+begin_src jupyter-python :session py
body = pd.read_csv("Genes/Body.csv")
upPermBody = pd.read_csv("Genes/Genelists/upPermBody.csv")
downPermBody = pd.read_csv("Genes/Genelists/downPermLeg.csv")

fig, axes = plt.subplots()
v = venn2_unweighted(subsets=(len(upPermBody), len(downPermBody), len(body)-len(upPermBody)-len(downPermBody)), set_labels=("Up Regulated", "Down Regulated"), ax=axes)
axes.set_title("Perm Expression in Body Genes")
fig.tight_layout()
fig.savefig("VennDiagrams/RevisedDiagrams/PermBody.png")
#+end_src
*** Venn 8
#+begin_src jupyter-python :session py
genes = pd.read_csv("Genes/listofgenes.csv")
upPerm = pd.read_csv("Genes/Genelists/upPerm.csv")
downPerm = pd.read_csv("Genes/Genelists/downPerm.csv")

fig, axes = plt.subplots()
v = venn2_unweighted(subsets=(len(upPerm), len(downPerm), len(genes)-len(upPerm)-len(downPerm)), set_labels=("Up Regulated", "Down Regulated"), ax=axes)
axes.set_title("Perm Expression")
fig.tight_layout()
fig.savefig("VennDiagrams/RevisedDiagrams/Perm.png")
#+end_src
