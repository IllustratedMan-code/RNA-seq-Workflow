#+title: RNA-seq Leg Vs Body workflow
#+STARTUP: overview
#+OPTIONS: ^:nil
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+EXPORT_FILE_NAME: index.html
#+TODO: TODO(t) REFACTOR(r) DEBUG(d) | DONE
:PROPERTIES:
:header-args: :pandoc t
:end:
* Introduction
+ The Ticks are sprayed with Permethrin and DEET
+ The Legs are separated from the bodies of the ticks and analyzed separately
+ The Fasta files + assembly are sent to Galaxy
* Galaxy
+ Import the fasta files + assembly to Galaxy
+ Run FastQC to determine data integrity and quality on each fasta
+ Run Trimmomatic to trim superfluous data from the fasta files
+ Run A fish analysis tool on the data (salmon, sailfish, kallisto quant) on each fasta file from trimmomatic.
  This requires the assembly as an input
+ Export the quant files for local analysis with R

* Metadata
The metadata for this project describes the treatment, body part, and trial for this project. This metadata is used to interface with the tximport library in R. Tximport uses the metadata to organize the quant data in a way that Deseq2 and EdgeR can understand. An arbitrary number of columns is allowed, but the name column is required. Keep the metadata.csv file in parent directory to the quant files. The quant files should all be placed in the same directory. In this case, the data is placed in a folder called =CorrectedQuantData=. The Metadata is used by the various tools to figure out what each file means in the context of the experiment. It is very important that the metatdata is a correct representation of the data, or the tools will misinterpret the data.

| name                | pesticides | part | trial |
|---------------------+------------+------+-------|
| Per_Bod_1.tabular   | perm       | body |     1 |
| Per_Bod_3.tabular   | perm       | body |     3 |
| Per_Leg_3.tabular   | perm       | leg  |     3 |
| Per_Leg_2.tabular   | perm       | leg  |     2 |
| Per_Leg_1.tabular   | perm       | leg  |     1 |
| Deet_Bod_3.tabular  | deet       | body |     3 |
| Deet_Bod_2.tabular  | deet       | body |     2 |
| Deet_Bod_1.tabular  | deet       | body |     1 |
| Deet_Leg_3.tabular  | deet       | leg  |     3 |
| Deet_Leg_2.tabular  | deet       | leg  |     2 |
| Deet_Leg_1.tabular  | deet       | leg  |     1 |
| Cont_Bod_3.tabular  | control    | body |     3 |
| Cont_Bod_2.tabular  | control    | body |     2 |
| Cont_Bod_1.tabular  | control    | body |     1 |
| Cont_Leg_3.tabular  | control    | leg  |     3 |
| Cont_Leg_2a.tabular | control    | leg  |     2 |
| Cont_Leg_1.tabular  | control    | leg  |     1 |

* R functions
:PROPERTIES:
:header-args: :tangle scripts/functions.r
:end:
The script snippets in this section are contained within the =functions.r= file.
** txi function
uses the tximport package to import the quant data. The tximport package is
used in both deseq and edgeR for data import. It is optional, but saves a lot
of time on initial data organization
#+begin_src jupyter-R :session R
txi <- function(directory, quantdatafoldername, metadata, fishtype){
  library(tximport)
  setwd(directory)
  metadata <- read.csv(metadata, header=TRUE)
  files <- file.path(directory, quantdatafoldername, metadata$name)
  names(files) <- metadata$name
  genes <- read.table("genes2.tabular")
  txi <- tximport(files, type=fishtype, tx2gene=genes)
  return(list(txi, metadata))
}
#+end_src

#+RESULTS:

** Initial Deseq Function
Sets up the deseq data set object and returns it. Deseq uses a linear model to fit the data. Read more about it here [[https://bioconductor.org/packages/release/bioc/vignettes/DESeq2/inst/doc/DESeq2.html#theory-behind-deseq2][Deseq2]].
#+begin_src jupyter-R :session R
initialDeseq <- function(txi, metadata, design=~part + pesticides){
  library(DESeq2)
  # Deseq2 dataset from tximport
  data <- DESeqDataSetFromTximport(txi, colData=metadata, design =design)
  Deseq <- DESeq(data)
  results <- results(Deseq)
  print(summary(results))
  return(list(Deseq, results))
}
#+end_src

#+RESULTS:

** ReDeseq
sets up the deseq object with a different design criteria. The design changes how log2foldchange is expressed.
It is more difficult to get multifactorial analysis in a single deseq object than with edgeR. Changing the design is necessary for complicated analysis.
#+begin_src jupyter-R :session R
reDeseq <- function(dds, design=~part){
  ddsMF <- dds
  design(ddsMF) <- formula(design)
  ddsMF <- DESeq(ddsMF)
  Mres <- results(ddsMF)
  return(list(ddsMf, Mres))
  }
#+end_src

** initialEdgeR
Sets up the EdgeR object and returns it. EdgeR uses a different linear model. Read more about it here [[https://www.bioconductor.org/packages/release/bioc/vignettes/edgeR/inst/doc/edgeRUsersGuide.pdf][edgeR]].
#+begin_src jupyter-R :session R
initialEdgeR <- function(txi, meta){
  library(edgeR)
  # EdgR dataset from tximport
  counts <- txi$counts
  length <- txi$length
  normMat <- length / exp(rowMeans(log(length)))
  normCts <- counts / normMat
  eff.lib <- calcNormFactors(normCts) * colSums(normCts)
  normMat <- sweep(normMat, 2, eff.lib, "*")
  normMat <- log(normMat)
  y <- DGEList(counts)
  y <- scaleOffset(y, normMat)
  
  pest <- factor(meta$pesticides, levels=c("perm", "deet", "control"))
  part <- factor(meta$part, levels=c("leg", "body"))
  design <- model.matrix(~0 + pest + part)
  keep <- filterByExpr(y, design)
  EdgeR <- y[keep, ]
  return(list(EdgeR, design))
}
#+end_src
** estEdgeR
finds the fit of the data and returns it for further analysis. Uses the edgeR functions to estimate dispersion of
the genes. It is much faster than deseq2.
#+begin_src jupyter-R :session R
estEdgeR <- function(EdgeR, design){
  library(edgeR)
  y <- estimateGLMCommonDisp(EdgeR, design)
  y <- estimateGLMTrendedDisp(y, design)
  y <- estimateGLMTagwiseDisp(y, design)
  fit <- glmQLFit(y, design) 
  
  return(fit)
}
#+end_src

#+RESULTS:
* Expression analyis with R
EdgeR and Deseq2 are used to find lists of genes that are up-regulated and down-regulated when compared to design criteria. The design is used to curated the value of logfoldchange in Deseq2. They are compared using a pearson correlation in the plotting section.
** REFACTOR Deseq
:PROPERTIES:
:HEADER-ARGS: :tangle scripts/Deseq2-analysis.r
:END:
The script snippets in this section are contained in the =Deseq2-analysis.r= file.
*** Package imports
#+begin_src jupyter-R :session R
vignette(package="dplyr")

rdata <- list.files(pattern="\\.Rdata")
args <- commandArgs(trailingOnly = TRUE)
if(length(args) > 0){
    if(args == "rerun"){
        print("rerunning data")
        r
    }
}
# general library imports ----
library(tximport)
library(readr)
library("pheatmap")
#+end_src

#+RESULTS:

*** Initial Setting
These values determine what directory the deseq objects are taken from.
#+begin_src jupyter-R :session R
# change these values to your own situations
directory <- "/home/david/Documents/BenoitLab/R/largeRNASEQ"
quantdatafoldername <- "CorrectedQuantData"
fishtype <- "sailfish"
#+end_src

#+RESULTS:

*** Run Initial Deseq Functions
#+begin_src jupyter-R :session R
source("/home/david/Documents/BenoitLab/RNA-seq/scripts/functions.r")
txi <- txi(directory, quantdatafoldername, "metadata.csv", fishtype)
Deseq <- initialDeseq(txi[[1]], txi[[2]])
#+end_src

#+RESULTS:
#+begin_example
reading in files with read_tsv

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17


summarizing abundance

summarizing counts

summarizing length

Warning message in DESeqDataSet(se, design = design, ignoreRank):
“some variables in design formula are characters, converting to factors”
using counts and average transcript lengths from tximport

estimating size factors

using 'avgTxLength' from assays(dds), correcting for library size

estimating dispersions

gene-wise dispersion estimates

mean-dispersion relationship

final dispersion estimates

fitting model and testing


out of 163205 with nonzero total read count
adjusted p-value < 0.1
LFC > 0 (up)       : 1790, 1.1%
LFC < 0 (down)     : 2044, 1.3%
outliers [1]       : 2298, 1.4%
low counts [2]     : 18457, 11%
(mean count < 3)
[1] see 'cooksCutoff' argument of ?results
[2] see 'independentFiltering' argument of ?results

NULL
#+end_example

*** Do initial data manipulation
The part design is used to compare the leg to the body in total, disregarding pesticide. This is explained in detail in the pearson correlation section.
#+begin_src jupyter-R :session R
dds <- Deseq[[1]]
res <- Deseq[[2]]
#* vsd ntd rld
vsd <- vst(dds, blind=FALSE)
rld <- rlog(dds, blind=FALSE)
ntd <- normTransform(dds)

ddsMF <- dds
design(ddsMF) <- formula(~pesticides)
ddsMF <- DESeq(ddsMF)
Mres <- results(ddsMF)
design(dds) <- formula(~part)
part <- DESeq(dds)
res <- results(part)
#+end_src

#+RESULTS:
#+begin_example
using pre-existing normalization factors

estimating dispersions

found already estimated dispersions, replacing these

gene-wise dispersion estimates

mean-dispersion relationship

final dispersion estimates

fitting model and testing

using pre-existing normalization factors

estimating dispersions

found already estimated dispersions, replacing these

gene-wise dispersion estimates

mean-dispersion relationship

final dispersion estimates

fitting model and testing

-- replacing outliers and refitting for 4107 genes
-- DESeq argument 'minReplicatesForReplace' = 7
-- original counts are preserved in counts(dds)

estimating dispersions

fitting model and testing
#+end_example
*** Initial selection of the data
+ p value of less than 0.01
+ Leg is compared to body, therefore down-regulated are up-regulated in body
#+begin_src jupyter-R :session R
DR <- Mres[ which(Mres$padj < 0.01), ]
Body <- DR[which(DR$log2FoldChange < -2),]
Leg <- DR[which(DR$log2FoldChange > 2), ]
#+end_src

#+RESULTS:
:RESULTS:
#+begin_example
log2 fold change (MLE): pesticides perm vs control
Wald test p-value: pesticides perm vs control
DataFrame with 6 rows and 6 columns
            baseMean log2FoldChange     lfcSE       stat    pvalue      padj
           <numeric>      <numeric> <numeric>  <numeric> <numeric> <numeric>
dv.1      47203.3539       0.365233  0.488997  0.7469016  0.455123  0.999996
dv.10       724.7318       0.116932  1.232421  0.0948798  0.924410  0.999996
dv.100     1474.4296       0.116376  0.297011  0.3918226  0.695189  0.999996
dv.1000     246.0981       1.380686  0.909599  1.5179057  0.129038  0.999996
dv.10000     56.9568      -0.744815  1.389576 -0.5360020  0.591957  0.999996
dv.100000    19.8319       0.319016  0.972153  0.3281536  0.742796  0.999996
#+end_example
:END:

*** Save lists of the respective up-regulated genes
#+begin_src jupyter-R :session R
write.table(Body, file="/home/david/Documents/BenoitLab/RNA-seq/Deseq-Genes/Body.csv", quote=FALSE, col.names=TRUE, row.names=TRUE, sep=",")
write.table(Leg, file="/home/david/Documents/BenoitLab/RNA-seq/Deseq-Genes/Leg.csv", quote=FALSE, col.names=TRUE, row.names=TRUE, sep=",")
write.table(res, file="/home/david/Documents/BenoitLab/RNA-seq/Deseq-Genes/total.csv", quote=FALSE, col.names=TRUE, row.names=TRUE, sep=",")
#+end_src

#+RESULTS:

*** Create a new analysis design
#+begin_src jupyter-R :session R
newdd <- dds
design(newdd) <- formula(~part + part:pesticides)
newdd <- DESeq(newdd)
newres <- results(newdd)
#+end_src
*** Prepare the data for pheatmap plotting
#+begin_src jupyter-R :session R
select <- order(rowMeans(counts(dds, normalized=FALSE)), decreasing = TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("pesticides","part")])
#+end_src
*** Integrity plots
#+begin_src jupyter-R :session R
jpeg("generalfigures/plotMA_deseq.jpg")
plotMA(results)
dev.off()

jpeg("generalfigures/plotcounts_deseq.jpg")
plotCounts(data, gene=which.min(results$padj), intgroup = "part")
dev.off()

jpeg("generalfigures/meanSdvsd_deseq.jpg")
vsn::meanSdPlot(assay(vsd))
dev.off()

jpeg("generalfigures/meadnSdrld_deseq.jpg")
vsn::meanSdPlot(assay(rld))
dev.off()

jpeg("generalfigures/meanSdntd_deseq.jpg")
vsn::meanSdPlot(assay(ntd))
dev.off()

jpeg("generalfigures/pcaplot_deseq.jpg", width = 800, height=800)
plotPCA(vsd, intgroup=c("part", "pesticides"))
dev.off()

jpeg("generalfigures/pheatmapplotntd.jpg", width=800, height=800)
pheatmap(assay(ntd)[select,], cluster_rows=FALSE, show_rownames=TRUE, cluster_cols=TRUE, annotation_col=df)
dev.off()

jpeg("generalfigures/pheatmapplotvsd.jpg", width=800, height=800)
pheatmap(assay(vsd)[select,], cluster_rows=FALSE, show_rownames=TRUE, cluster_cols=FALSE, annotation_col=df)
dev.off()

jpeg("generalfigures/pheatmapplotrld.jpg", width=800, height=800)
pheatmap(assay(rld)[select,], cluster_rows=FALSE, show_rownames=TRUE, cluster_cols=FALSE, annotation_col=df)
dev.off()
#+end_src
*** Another Deseq Design
#+begin_src jupyter-R :session R

library(tidyverse)
vstarray <- assay(vsd)

range <- vstarray[]
names <- rownames(range)
maxs <- rowMaxs(range)
mins <- rowMins(range)

maxs <- maxs-mins
pt <- tibble(names, maxs)
pt
pt <- pt %>% filter(maxs > 10)
pt
ggplot(pt, aes(x=names, y= maxs)) + geom_col()
descending <- arrange(pt, desc(maxs))
descending <- factor(descending["maxs"])
descending <- tibble(row = seq(length(descending)), descending)
ggplot(descending, aes(x=row, y= descending)) + geom_col()

sum(results$padj < 0.05, na.rm=T)
res <- results
#+end_src
*** Altered Selection of genes
#+begin_src jupyter-R :session R

Upregulated <- res[ which(res$padj < 0.03 & res$log2FoldChange > 0), ]
DownRegulated <- res[ which(res$padj < 0.03 & res$log2FoldChange < 0), ]
DownRegulated[order(DownRegulated$padj), ]
head(DownRegulated$padj)
D <- rownames(DownRegulated)
Up <- rownames(Upregulated)
DR <- res[ which(res$padj < 0.03), ]
DR[order(DR$padj),]
#+end_src
*** Save new selection to file
#+begin_src jupyter-R :session R
write.table(D, file="Genes/DownRegulated.txt", quote=FALSE, col.names=FALSE, row.names=FALSE, sep=",")
write.table(Up, file="Genes/UpRegulated.txt", quote=FALSE, col.names=FALSE, row.names=FALSE, sep=",")
#+end_src
*** Extra integrity plot
#+begin_src jupyter-R :session R
d <- mcols(Deseq,use.names=TRUE)
a <- data.frame(rownumb = seq(nrow(d)), d)
a <- data.frame(rownumb = seq(nrow(d)), basemean = d[,1])
library(ggplot2)
ggplot(a, aes(x=rownumb, y=dispGeneEst)) + geom_point()
#+end_src
*** TODO Extra EdgeR for venn diagrams
This is mostly contained in the EdgeR section.
#+begin_src jupyter-R :session R

#! EdgeR section ----
library(edgeR)
# EdgR dataset from tximport
counts <- txi$counts
length <- txi$length
normMat <- length / exp(rowMeans(log(length)))
normCts <- counts / normMat
eff.lib <- calcNormFactors(normCts) * colSums(normCts)
normMat <- sweep(normMat, 2, eff.lib, "*")
normMat <- log(normMat)
y <- DGEList(counts)
y <- scaleOffset(y, normMat)



# EdgR heatmap
logcpm <- cpm(EdgeR)
meta <- read.csv("metadata.csv", sep= ",")
pest <- factor(meta$pesticides, levels=c("perm", "deet", "control"))
part <- factor(meta$part, levels=c("leg", "body"))
design <- model.matrix(~0 + pest + part)
design
keep <- filterByExpr(y, design)
EdgeR <- y[keep, ]
estimateDisp(EdgeR)
y <- estimateGLMCommonDisp(EdgeR, design)
y <- estimateGLMTrendedDisp(y, design)
y <- estimateGLMTagwiseDisp(y, design)
est <- estimateDisp(EdgeR, design, robust=TRUE)
design
fit <- glmQLFit(y, design)
lrt <- glmLRT(fit, coef=1:4)
test <- glmQLFTest(fit, coef=1:4)
lrc$PValue
lrt

test$logFC.pestperm - test$logFC.pestdeet

ggplot(test$table, aes(y=logFC.partleg, x=seq(nrow(test)))) + geom_hex()
#additional analysis----
table <- test$table
body <- table[table$logFC.partbody > 2, ]
leg <- table[table$logFC.partbody < -2, ]
table <- body
diff <- table$logFC.pestcontrol - table$logFC.pestdeet
library(tidyverse)
data <- tibble(data = diff, rows = seq(length(diff)))
ggplot(data, aes(x=rows, y=data)) + geom_point()
table$diff <- diff
cont <- table[table$diff > 2, ]
deet <- table[table$diff < -2, ]
diff2 <- table$logFC.pestcontrol - table$logFC.pestperm
table$diff2 <- diff2
cont2 <- table[table$diff2 > 2, ]
perm <- table[table$diff2 < -2, ]



library(VennDiagram)
futile.logger::flog.threshold(futile.logger::ERROR, name = "VennDiagramLogger")
Legcont1 <- cont
Legcont2 <- cont2
deet1 <- deet
perm1 <- perm
d <- data.frame(Pest = c(rep(c("DEET", "DEET", "PERM", "PERM"))),
                Part = c(rep("Body", 4), rep("Leg", 4)),
                Names = c(rep(c("Up Regulated", "Down Regulated"), 4)),
                GeneCount = c(nrow(deet), nrow(cont), nrow(perm), nrow(cont2), nrow(deet1), nrow(Legcont1), nrow(perm1), nrow(Legcont2)))

write.table(d, file="Genes/regulation.csv", quote=FALSE, col.names=TRUE, row.names=FALSE, sep=",")
write.table(rownames(perm), file="Genes/perm.csv", quote=FALSE, col.names=FALSE, row.names=FALSE, sep=",")

pl ggplot(d, aes(x=Names, y = GeneCount, fill=Names)) + geom_col()
venn.diagram(
  x = list(rownames(deet), rownames(cont)),
  category.names = c("DEET" , "Control"),
  filename = "Deetvcontorlvleg.png",
  compression = "lzw",


  lwd = 2,
  lty = 'blank',
  fill = c("red", "blue"),
)
grid.draw(tmp)

write.table(rownames(perm), file="Genes/perm.csv", quote=FALSE, col.names=FALSE, row.names=FALSE, sep=",")
write.table(rownames(deet), file="Genes/deet.csv", quote=FALSE, col.names=FALSE, row.names=FALSE, sep=",")
write.table(rownames(cont), file="Genes/deetcont.csv", quote=FALSE, col.names=FALSE, row.names=FALSE, sep=",")
write.table(rownames(cont2), file="Genes/permcont.csv", quote=FALSE, col.names=FALSE, row.names=FALSE, sep=",")

ggplot(contdata, aes(x=rows, y=data)) + geom_point()

rownames(cont)
# EdgeR plots ----
jpeg("generalfigures/BCVplot_edgeR.jpg")
plotBCV(est)
dev.off()

jpeg("generalfigures/QLDISP_edgeR.jpg")
plotQLDisp(fit)
dev.off()

jpeg("generalfigures/MDS_edgeR.jpg")
plotMDS(logcpm)
dev.off()


# jpeg("generalfigur>es/SpliceDGE_edgeR.jpg")
# plotSpliceDGE(logcpm)
# dev.off()

# end ----
library(matrixStats)
stats <- txi$abundance
tpm <- transform(stats, sd=rowSds(stats), avg=rowMeans(stats), median = rowMedians(stats))

dge <- DGEList(txi$counts)
cpm <- cpm(dge, log=TRUE)
head(cpm)
data.frame(cpm)
cpmtibble <- as_tibble(cpm, rownames="geneID")
cpmpivot <- pivot_longer(cpmtibble, cols=seq(2, ncol(cpmtibble)), names_to = "samples", values_to = "expression")



ggplot(tpm) +
  aes(x = sd, y = median) +
  geom_hex()

ggplot(tpm) +
  aes(x = sd, y = avg) +
  geom_point(shape=16, size=2) +
  geom_smooth(method=lm) +
  geom_hex() +
  labs(y="Median", x = "Standard deviation", title="Transcripts per million (TPM)", subtitle="unfiltered, non-normalized data") +
  theme_classic() +
  theme_dark() +
  theme_bw()

ggplot(cpmpivot) +
  aes(x=samples, y=expression, fill=samples) +
  geom_violin(trim = FALSE, show.legend = FALSE) +
  stat_summary(fun = "median",geom = "point",shape = 95,size = 10,color = "black",show.legend = FALSE) +
  labs(y="log2 expression", x = "sample",title="Log2 Counts per Million (CPM)",subtitle="unfiltered, non-normalized",caption=paste0("produced on ", Sys.time())) +
  theme_bw()

keepers <- rowSums(cpm > 1)>=3
table(rowSums(dge$counts==0)==10)


# venndiagrams ----

library(VennDiagram)


bodygenes <- names(Deseq)
bodygenes <- bodygenes[!bodygenes %in% rownames(Leg)]
leggenes <- names(Deseq)
leggenes <- leggenes[!leggenes %in% rownames(Body)]
names(Deseq) - rownames(Body)

#
bodyup <- table[table["partleg"] > 0]


# Venn Diagram 1----
futile.logger::flog.threshold(futile.logger::ERROR, name = "VennDiagramLogger")
venn.diagram(
  x = list(bodygenes, leggenes),
  category.names = c("Body" , "Leg"),

  filename = '14_venn_diagramm.png',
  output=FALSE,
  imagetype="png",
  compression="lzw",


  lwd = 2,
  lty = 'blank',
  fill = c("red", "blue"),
)


#+end_src
** EdgeR
:PROPERTIES:
:header-args: :tangle scripts/edgeR-Analysis.r
:end:
The scripts in this section are contained in the =edgeR-Analysis.r= file.
*** Initial settings
Directory and function setup, configure this when running the script. This is an attempt at simplifying the analysis process in R to a point that is hopefully nonspecific to deseq2 or edgeR. Enter the directory where the RNA-seq data is located, the folder containing the quant data, and the type of quant tool used (fishtype). The script should take care of the rest.
#+begin_src jupyter-R :session R
setwd("/home/david/Documents/BenoitLab/RNA-seq/")
source("scripts/functions.r")
directory <- "/home/david/Documents/BenoitLab/R/largeRNASEQ/"
quantdatafoldername <- "CorrectedQuantData"
fishtype <- "sailfish"
#+end_src

#+RESULTS:

*** Do the initial processing of the data
Imports the data and runs it through initial edgeR analysis using the functions created above. The functions do the initial manipulation of the data as detailed in the edgeR paper. This outputs the objects we will trim based on expression.
#+begin_src jupyter-R :session R
a <- txi(directory, quantdatafoldername, "metadata.csv", fishtype)
#De <- initialDeseq(a[[1]], a[[2]])
Ed <- initialEdgeR(a[[1]], a[[2]])
Eest <- estEdgeR(Ed[[1]], Ed[[2]])
lrt <- glmLRT(Eest, coef=1:4)
test <- glmQLFTest(Eest, coef=1:4)
#+end_src
#+RESULTS:
:results:
#+begin_example
reading in files with read_tsv

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17


summarizing abundance

summarizing counts

summarizing length

Loading required package: limma
#+end_example
:end:
*** Partion the data into body and leg tables
The Table object from the test object is separated into a body and a leg section, where the genes in the leg section are down regulated in the body and vice versa.
#+begin_src jupyter-R :session R
table <- test$table
pSelectedTable <- table[table$PValue < 0.01, ]
body <- pSelectedTable[pSelectedTable$logFC.partbody > 2, ]
leg <- pSelectedTable[pSelectedTable$logFC.partbody < -2, ]
head(table)
#+end_src
#+RESULTS:
:results:
A data.frame: 6 × 7
| <!--/--> | logFC.pestperm &lt;dbl&gt; | logFC.pestdeet &lt;dbl&gt; | logFC.pestcontrol &lt;dbl&gt; | logFC.partbody &lt;dbl&gt; | logCPM &lt;dbl&gt; | F &lt;dbl&gt; | PValue &lt;dbl&gt; |
|---|---|---|---|---|---|---|---|
| dv.1 |  -9.062931 |  -9.041072 |  -9.421801 | -1.2682333 | 10.2518560 | 1887.55748 | 2.396761e-23 |
| dv.10 | -19.469298 | -18.646218 | -19.433261 |  4.6018739 |  4.4692922 |  288.30812 | 4.676221e-16 |
| dv.100 | -14.952176 | -14.803404 | -15.144838 |  0.6634848 |  5.3629574 | 2378.70835 | 3.002552e-24 |
| dv.1000 | -18.190167 | -17.987386 | -19.298126 |  1.9126410 |  2.9009374 |  179.68487 | 3.011590e-14 |
| dv.10000 | -19.661420 | -19.161442 | -18.125313 | -1.2488839 |  0.6230704 |   72.51806 | 7.480800e-11 |
| dv.100000 | -20.483853 | -20.237145 | -20.670230 | -0.9576869 | -0.8094184 |  122.00872 | 8.769197e-13 |
:end:
*** Save the data tables to a file
Configure this to fit your computer. This section saves csv files with the expression data from the tables in the previous section.

#+begin_src jupyter-R :session R
setwd("/home/david/Documents/BenoitLab/RNA-seq/")
write.table(table, file="edgeR-Genes/TotalExpr.csv", quote=FALSE, col.names=TRUE, row.names=TRUE, sep=",")
write.table(leg, file="edgeR-Genes/legExpr.csv", quote=FALSE, col.names=TRUE, row.names=TRUE, sep=",")
write.table(body, file="edgeR-Genes/bodyExpr.csv", quote=FALSE, col.names=TRUE, row.names=TRUE, sep=",")
#+end_src

#+RESULTS:

*** Find the relative expression values when compared to the control
This is the main comparison with the pesticides done with the edgeR table. The control is subtracted from the pesticide expression to give a relative expression value. This is not necessary in Deseq and is instead done by manipulating the design.
#+begin_src jupyter-R :session R
deetvcontrol <- table$logFC.pestdeet - table$logFC.pestcontrol
permvcontrol <- table$logFC.pestperm - table$logFC.pestcontrol
deetvcontrolvbody <- body$logFC.pestdeet - body$logFC.pestcontrol
permvcontrolvbody <- body$logFC.pestperm - body$logFC.pestcontrol
deetvcontrolvleg <- leg$logFC.pestdeet - leg$logFC.pestcontrol
permvcontrolvleg <- leg$logFC.pestperm - leg$logFC.pestcontrol

table$deetvcontrol <- deetvcontrol
table$permvcontrol <- permvcontrol
body$deetvcontrol <- deetvcontrolvbody
body$permvcontrol <- permvcontrolvbody
leg$deetvcontrol <- deetvcontrolvleg
leg$permvcontrol <- permvcontrolvleg
#+end_src
*** Selection of the data
Selects only the columns that have an expression value greater than 2(up-regulated) or less than -2(down-regulated). This is the same selection done earlier in the script with the body and leg.
#+begin_src jupyter-R :session R
updeet <- table[table$deetvcontrol > 2,]
downdeet <- table[table$deetvcontrol < -2,]



updeetbody <- body[body$deetvcontrol > 2,]
downdeetbody <- body[body$deetvcontrol < -2,]
updeetleg <- leg[leg$deetvcontrol > 2,]
downdeetleg <- leg[leg$deetvcontrol < -2,]


upperm <- table[table$permvcontrol > 2,]
downperm <- table[table$permvcontrol < -2,]
uppermbody <- body[body$permvcontrol > 2,]
downpermbody <- body[body$permvcontrol < -2,]
uppermleg <- leg[leg$permvcontrol > 2,]
downpermleg <- leg[leg$permvcontrol < -2,]
#+end_src
*** Create a csv for bar plotting
This is just a simple organization of the number of genes deferentially expressed for each comparison. The csv is saved using the write.table line, so change the path to fit your directory structure.
#+begin_src jupyter-R :session R
d <- data.frame(Pest = c(rep(c("DEET", "DEET", "PERM", "PERM"))),
                Part = c(rep("Body", 4), rep("Leg", 4)),
                Names = c(rep(c("Up Regulated", "Down Regulated"), 4)),
                GeneCount = c(nrow(downdeetbody), nrow(updeetbody), nrow(downpermbody), nrow(uppermbody), nrow(downdeetleg), nrow(updeetleg), nrow(downpermleg), nrow(uppermleg)))
write.table(d, file="edgeR-Genes/venn-regulation.csv", quote=FALSE, col.names=TRUE, row.names=FALSE, sep=",")
#+end_src
*** Gets the row-names
This separates the data into just the gene names for each comparison. This is helpful for venn diagrams and other comparison.
#+begin_src jupyter-R :session R
upperm <- table[table$permvcontrol > 2,]
downperm <- table[table$permvcontrol < -2,]
uppermbody <- body[body$permvcontrol > 2,]
downpermbody <- body[body$permvcontrol < -2,]
uppermleg <- leg[leg$permvcontrol > 2,]
downpermleg <- leg[leg$permvcontrol < -2,]

uppermgenes <- rownames(upperm)
downpermgenes <- rownames(downperm)
uppermleggenes <- rownames(uppermleg)
downpermleggenes <- rownames(downpermleg)
uppermbodygenes <- rownames(uppermbody)
downpermbodygenes <- rownames(downpermbody)

updeetgenes <- rownames(updeet)
downdeetgenes <- rownames(downdeet)
updeetleggenes <- rownames(updeetleg)
downdeetleggenes <- rownames(downdeetleg)
updeetbodygenes <- rownames(updeetbody)
downdeetbodygenes <- rownames(downdeetbody)
#+end_src

*** Create a list of dataframes corresponding to the total, leg, and body
Consolidates the genes into a list of dataframes for easy saving
#+begin_src jupyter-R :session R
genelist <- list(upPerm = uppermgenes, downPerm = downpermgenes,
                upPermBody=uppermbodygenes, downPermBody=downpermbodygenes,
                upPermLeg = uppermleggenes, downPermLeg = downpermleggenes,
                upDeet = updeetgenes, downDeet = downdeetgenes,
                upDeetLeg = updeetleggenes, downDeetLeg = downdeetleggenes,
                upDeetBody = updeetbodygenes, downDeetBody = downdeetbodygenes, table=rownames(table), leg=rownames(leg), body=rownames(body))
#+end_src
*** Save the genelist to files
Saves all of the comparisons to file.
#+begin_src jupyter-R :session R
for (i in seq(length(genelist))){
    namelist <- names(genelist)
    write.table(genelist[i], file=paste("edgeR-Genes/Genelists","/", namelist[i], ".csv", sep=""), quote=FALSE, col.names=FALSE, row.names=FALSE, sep=",")
}
#+end_src
** WGCNA
:PROPERTIES:
:HEADER-ARGS: :tangle scripts/WGCNA-Build-Data.r
:END:
The script snippets in this section are contained in the =WGCNA-Build-Data.r= file.
*** Build data file for WGCNA from quant files
#+begin_src jupyter-R :session R
setwd("/home/david/Documents/BenoitLab/R/largeRNASEQ/CorrectedQuantData/")
quantfiles <- list.files(".", pattern = ".tabular")
df <- data.frame(row.names = read.delim(quantfiles[1])$Name)
for (fileName in quantfiles) {
  file <- read.delim(fileName)
  df[tools::file_path_sans_ext(fileName)] <- file$TPM
}
write.csv(df, "../WGCNACorrectedQuant.csv", quote = FALSE)
head(df)
#+end_src

#+RESULTS:
#+begin_src rst

A data.frame: 6 × 18

| <!--/--> | Cont_Bod_1 &lt;dbl&gt; | Cont_Bod_2 &lt;dbl&gt; | Cont_Bod_3 &lt;dbl&gt; | Cont_Leg_1 &lt;dbl&gt; | Cont_Leg_2 &lt;dbl&gt; | Cont_Leg_2a &lt;dbl&gt; | Cont_Leg_3 &lt;dbl&gt; | Deet_Bod_1 &lt;dbl&gt; | Deet_Bod_2 &lt;dbl&gt; | Deet_Bod_3 &lt;dbl&gt; | Deet_Leg_1 &lt;dbl&gt; | Deet_Leg_2 &lt;dbl&gt; | Deet_Leg_3 &lt;dbl&gt; | Per_Bod_1 &lt;dbl&gt; | Per_Bod_3 &lt;dbl&gt; | Per_Leg_1 &lt;dbl&gt; | Per_Leg_2 &lt;dbl&gt; | Per_Leg_3 &lt;dbl&gt; |
|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|
| dv.1 | 22.2763 | 37.8193 | 40.3742 | 61.417900 | 0.0681662 | 83.278200 | 69.070000 | 48.1591 |  43.6397 | 50.0788 | 86.710000 | 94.912900 | 85.979000 | 52.7464 | 56.6623 | 9.02202e+01 | 96.067400 | 76.999000 |
| dv.2 | 15.9128 | 44.7599 | 54.8798 |  0.786553 | 0.0756211 |  0.722977 |  0.493229 | 93.6505 | 105.8530 | 72.7003 |  2.753670 |  0.870014 |  3.473720 | 73.2376 | 80.6752 | 1.26751e+00 |  0.855653 |  0.255794 |
| dv.3 | 10.6041 | 11.7978 | 14.3419 |  9.187200 | 0.0756683 | 14.169700 | 12.297800 | 16.7729 |  14.5622 | 18.3525 | 14.070000 | 17.049100 | 15.897900 | 16.5017 | 18.0218 | 1.62399e+01 | 18.330600 | 14.676500 |
| dv.4 | 16.5992 | 19.8922 | 23.9323 | 24.027200 | 0.0794267 | 30.721800 | 27.661300 | 24.9121 |  21.8748 | 27.2285 | 29.715900 | 35.491900 | 34.275800 | 23.6021 | 25.1121 | 2.79280e+01 | 31.287200 | 25.525300 |
| dv.5 |  0.0000 |  0.0000 |  0.0000 |  0.294700 | 0.0834384 |  0.875706 |  0.715919 |  0.0000 |   0.0000 |  0.0000 |  0.320064 |  0.391045 |  0.193081 |  0.0000 |  0.0000 | 2.79643e-05 |  0.671768 |  0.217907 |
| dv.6 |  0.0000 |  0.0000 |  0.0000 |  0.484270 | 0.0837346 |  0.431047 |  0.759755 |  0.0000 |   0.0000 |  0.0000 |  0.329439 |  0.940694 |  1.231160 |  0.0000 |  0.0000 | 1.37827e+00 |  0.962562 |  0.141731 |
#+end_src

*** Build metadata truth table for WGCNA
This is the format for the WGCNA metadata. This can be generated from the metadata used in the edgeR and Deseq2 sections. It can also be written by hand.
| sample              | pesticides_perm | pesticides_deet | pesticides_control | part_body | part_leg | trial_1 | trial_3 | trial_2 |
| Per_Bod_1.tabular   |               1 |               0 |                  0 |         1 |        0 |       1 |       0 |       0 |
| Per_Bod_3.tabular   |               1 |               0 |                  0 |         1 |        0 |       0 |       1 |       0 |
| Per_Leg_3.tabular   |               1 |               0 |                  0 |         0 |        1 |       0 |       1 |       0 |
| Per_Leg_2.tabular   |               1 |               0 |                  0 |         0 |        1 |       0 |       0 |       1 |
| Per_Leg_1.tabular   |               1 |               0 |                  0 |         0 |        1 |       1 |       0 |       0 |
| Deet_Bod_3.tabular  |               0 |               1 |                  0 |         1 |        0 |       0 |       1 |       0 |
| Deet_Bod_2.tabular  |               0 |               1 |                  0 |         1 |        0 |       0 |       0 |       1 |
| Deet_Bod_1.tabular  |               0 |               1 |                  0 |         1 |        0 |       1 |       0 |       0 |
| Deet_Leg_3.tabular  |               0 |               1 |                  0 |         0 |        1 |       0 |       1 |       0 |
| Deet_Leg_2.tabular  |               0 |               1 |                  0 |         0 |        1 |       0 |       0 |       1 |
| Deet_Leg_1.tabular  |               0 |               1 |                  0 |         0 |        1 |       1 |       0 |       0 |
| Cont_Bod_3.tabular  |               0 |               0 |                  1 |         1 |        0 |       0 |       1 |       0 |
| Cont_Bod_2.tabular  |               0 |               0 |                  1 |         1 |        0 |       0 |       0 |       1 |
| Cont_Bod_1.tabular  |               0 |               0 |                  1 |         1 |        0 |       1 |       0 |       0 |
| Cont_Leg_3.tabular  |               0 |               0 |                  1 |         0 |        1 |       0 |       1 |       0 |
| Cont_Leg_2a.tabular |               0 |               0 |                  1 |         0 |        1 |       0 |       0 |       1 |
| Cont_Leg_1.tabular  |               0 |               0 |                  1 |         0 |        1 |       1 |       0 |       0 |
**** From existing metadata file
This can be automated from existing metadata file in the deseq section.
#+begin_src jupyter-R :session R
setwd("/home/david/Documents/BenoitLab/R/largeRNASEQ")
metadata <- read.csv("metadata.csv", row.names = 1)
truthTable <- data.frame(row.names = row.names(metadata))
for (column in colnames(metadata)) {
  for (row in unique(metadata[column])) {
    for (item in row) {
      truthTable[, paste(column, item, sep = "_")] <- as.integer(item == metadata[[column]])
    }
  }
}
truthTable <- data.frame(sample = row.names(truthTable), truthTable)
write.csv(truthTable, "WGCNATruthTable.csv", row.names=FALSE)
truthTable
#+end_src
**** From scratch
It can also be built from scratch (=not recommended=)
#+begin_src jupyter-R :session R
setwd("/home/david/Documents/BenoitLab/R/largeRNASEQ")
truthTable <- data.frame(sample = colnames(df))
truthTable$Control <- c(
  1, 1, 1, 1, 1, 1,
  1, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0
)
truthTable$DEET <- c(
  0, 0, 0, 0, 0, 0,
  0, 1, 1, 1, 1, 1,
  1, 0, 0, 0, 0, 0
)
truthTable$Permethrin <- c(
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 1, 1, 1, 1, 1
)
truthTable$Body <- c(
  1, 1, 1, 0, 0, 0,
  0, 1, 1, 1, 0, 0,
  0, 1, 1, 0, 0, 0
)
truthTable$Leg <- c(
  0, 0, 0, 1, 1, 1,
  1, 0, 0, 0, 1, 1,
  1, 0, 0, 1, 1, 1

write.csv(truthTable, "./WGCNATruthTable.csv", row.names = FALSE)
#+end_src
* Fasta Manipulation
** Get Gene names
This program just pulls the names of the genes out of the fasta file. There are probably less messy ways to do this. Online programs exist for this as well, but this is a fairly simple c++ program.
#+begin_src cpp :tangle scripts/geneextract.cpp
#include <iostream>
#include <fstream>
#include <string>
#include <vector>

int main(){
    std::ifstream in;
    in.open("GeneReference/genelist.fasta");
    std::string line;
    std::ofstream out;
    out.open("GeneReference/listofgenes.csv");
    if (in.is_open()){
        while(getline(in, line)){
            if (line[0] == '>'){
                line.erase(0, 1);
                out << line << std::endl;
            }
        }
    }
}
#+end_src

#+RESULTS:

* Blast
You have 2 choices for this step.
+ If you are familiar with [[https://digitalinsights.qiagen.com/products-overview/discovery-insights-portfolio/analysis-and-visualization/qiagen-clc-main-workbench/][CLC main workbench]] then you can use that to interface with [[https://blast.ncbi.nlm.nih.gov/Blast.cgi][NCBI blast]] to compare the genes to another organism with annotations (Ixodes Scapularius in my case).
+ The other option is to use [[https://github.com/IllustratedMan-code/FastBlast][This Repository]] that I wrote called FastBlast.
** Fastblast
The repository has a more detailed README but I will relate it to the rest of the code here
+ The files that have been generated from Deseq and EdgeR need to be compared to another genome that has annotations, so to do that I am going to compare my organism (Dermacentor Variablis) to Ixodes Scapularis using blast.
+ FastBlast automates the blast analysis with the blast command line tool
+ A c++ file parses the csv files that were generated previously and creates .fasta files using the DV assembly.
+ Blast compares the new fasta files with a blast database created with the Ixodes to give gene-ontology terms in a .blastout file.
+ A c++ file parses the blast output and extracts only the genes that were most similar in the blast output and exports the new list as a .csv

* Gene Ontology analysis
** Tools
+ [[http://revigo.irb.hr/][Revigo]]
+ [[http://geneontology.org][geneontology.org]]
+ [[https://biit.cs.ut.ee/gprofiler/gost][G:profiler]]
** TODO Automation
I wanted to automate these tools even though they are only available as websites (except for G:profiler) because I have a lot of different csv files to manage in this project, and doing it all by hand seemed like a recipe for disaster.
+ Refer to the FastBlast repository for instructions on how to run these web-scraper scripts
+ The files outputted from the blast step are in the correct format to use with the GO tools
+ Using the web scraper scripts, the data is transformed into a format that is plottable as treemaps and dotplots (plotting section)

* Plotting
This uses R and python to plot data.
** Required Packages
These packages are only required for plotting the data
*** R packages
+ tidyverse (ggplot)
+ ggpubr (correlation methods)
*** Python packages
+ Matplotlib
+ pandas
+ numpy
+ matplotlib_venn
** Venn Diagrams
:PROPERTIES:
:header-args: :tangle scripts/Venn.py
:end:
*** Imports
Change directory based on project
#+begin_src jupyter-python :session py
import matplotlib.pyplot as plt
from matplotlib_venn import venn2, venn2_circles, venn2_unweighted
import pandas as pd
import numpy as np
import os
plt.style.use("ggplot")
os.chdir("/home/david/Documents/BenoitLab/RNA-seq")
#+end_src

#+RESULTS:


*** REFACTOR Venn 1 (actually a bar plot)
#+begin_src jupyter-python :session py
data = pd.read_csv("edgeR-Genes/venn-regulation.csv")
plt.style.use("ggplot")
fig, axes = plt.subplots(1, 4)


i = 0

maximum = data["GeneCount"].max()

for pest in data["Part"].unique():
    pestdata = data[data["Part"] == pest]
    for part in pestdata["Pest"].unique():
        partdata = pestdata[pestdata["Pest"] == part]
        x = partdata["Names"]
        y = partdata["GeneCount"]
        axes[i].bar(x, y, color=["r", "b"])
        axes[i].set_xticks(partdata["Names"])
        axes[i].set_ylim(0, maximum)
        if i != 0:
            axes[i].get_yaxis().set_visible(False)
        axes[i].set_xlabel(part + "\n" + pest)
        axes[0].set_ylabel("Gene Count")

        i += 1
fig.suptitle("Gene Regulation")
fig.savefig("figures/EdgeR/gene-regulation-bar-plot.png", bbox_inches="tight", dpi=250)
plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/945c7a525c6170d2e34d77d706d31725275d2d3b.png]]

*** REFACTOR Deet and Perm regulation Venn 2
#+begin_src jupyter-python :session py
plt.style.use("ggplot")

from matplotlib_venn import venn2, venn2_circles, venn2_unweighted
from matplotlib_venn import venn3, venn3_circles


deet = pd.read_csv("edgeR-Genes/genelists/upDeet.csv", header=None)
deetcont = pd.read_csv("edgeR-Genes/genelists/downDeet.csv", header=None)
perm = pd.read_csv("edgeR-Genes/genelists/upPerm.csv", header=None)
permcont = pd.read_csv("edgeR-Genes/genelists/downPerm.csv", header=None)
genes = pd.read_csv("edgeR-Genes/genelists/listofgenes.csv", header=None)
def compare(s1, s2):
    c = len(list(set(s1.iloc[:, 0]) & set(s2.iloc[:, 0])))
    return(c)

diff = compare(deet, genes)
len(deet)
fig, axes = plt.subplots(2)
v1 = venn2_unweighted(subsets=(len(deet), len(deetcont), len(genes)-len(deetcont)-len(deet)), set_labels=("Up Regulated", "Down Regulated"), ax=axes[0])
v2 = venn2_unweighted(subsets=(len(perm), len(permcont), len(genes)-len(permcont)-len(perm)), set_labels=("Up Regulated", "Down Regulated"), ax=axes[1])
axes[0].set_title("Deet")
axes[1].set_title("Perm")
fig.tight_layout()
fig.savefig("figures/EdgeR/DeetAndPermRegulation.png", bbox_inches="tight", dpi=250)
plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/e1032e4823ae652e92d618018b0a64b651fc0991.png]]

*** Venn 3
This compares the expression of body and legs when compared to the total.
#+begin_src jupyter-python :session py
genes = pd.read_csv("GeneReference/listofgenes.csv", header=None)
body = pd.read_csv("GeneReference/Body.csv")
leg = pd.read_csv("GeneReference/Leg.csv")

fig, axes = plt.subplots()

v = venn2_unweighted(subsets=(len(body), len(leg),len(genes)-len(leg) - len(body)), set_labels=("Body", "Leg"), ax=axes)
v.get_patch_by_id("10").set_color("blue")
v.get_patch_by_id("11").set_color("blue")
v.get_patch_by_id("01").set_color("grey")
v.get_patch_by_id("01").set_alpha(0.5)
axes.set_title("Leg vs Body")
fig.tight_layout()
fig.savefig("figures/figure2/Deseq-BodyvsLeg.png", bbox_inches="tight", dpi=250)
fig.savefig("figures/figure2/Deseq-BodyvsLeg.pdf", bbox_inches="tight", dpi=250)

plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/2a5270b9b5cd24647389aedd0601cb8de1d7b70d.png]]

*** REFACTOR Venn 4
#+begin_src jupyter-python :session py
genes = pd.read_csv("edgeR-Genes/genelists/listofgenes.csv", header=None)
body = pd.read_csv("edgeR-Genes/bodyExpr.csv")
upDeetBody = pd.read_csv("edgeR-Genes/genelists/upDeetBody.csv")
downDeetBody = pd.read_csv("edgeR-Genes/genelists/downDeetBody.csv")

fig, axes = plt.subplots()

v = venn2_unweighted(subsets=(len(upDeetBody), len(downDeetBody), len(body)- len(upDeetBody)-len(downDeetBody)), set_labels=("Up Regulated", "Down Regulated"), ax=axes)
axes.set_title("Deet Expression in Body Genes")
fig.tight_layout()
fig.savefig("figures/figure3/DeetBody.png")
plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/77222a96324bfe62705fac3385f0ce24170d7b73.png]]

*** REFACTOR Venn 5
#+begin_src jupyter-python :session py
leg = pd.read_csv("edgeR-Genes/legExpr.csv")
upDeetLeg = pd.read_csv("edgeR-Genes/genelists/upDeetLeg.csv")
downDeetLeg = pd.read_csv("edgeR-Genes/genelists/downDeetLeg.csv")

fig, axes = plt.subplots()
v = venn2_unweighted(subsets=(len(upDeetLeg), len(downDeetLeg), len(leg)-len(upDeetLeg)-len(downDeetLeg)), set_labels=("Up Regulated", "Down Regulated"), ax=axes)
axes.set_title("Deet Expression in Leg Genes")
fig.tight_layout()
fig.savefig("figures/figure3/DeetLeg.png")
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/8079451bcb486c2b61f068c6ce5a55d53b60e38f.png]]

*** REFACTOR Venn 6
#+begin_src jupyter-python :session py
leg = pd.read_csv("edgeR-Genes/legExpr.csv")
upPermLeg = pd.read_csv("edgeR-Genes/genelists/upPermLeg.csv")
downPermLeg = pd.read_csv("edgeR-Genes/genelists/downPermLeg.csv")

fig, axes = plt.subplots()
v = venn2_unweighted(subsets=(len(upPermLeg), len(downPermLeg), len(leg)-len(downPermLeg)-len(upPermLeg)), set_labels=("Up Regulated", "Down Regulated"), ax=axes)
axes.set_title("Perm Expression in Leg Genes")
fig.tight_layout()
fig.savefig("figures/EdgeR/PermLeg.png")
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/e9101058ea8df9f3dc753df4a98fd1cc9e48d29f.png]]

*** DEBUG Venn 7
#+begin_src jupyter-python :session py
body = pd.read_csv("edgeR-Genes/bodyExpr.csv")
upPermBody = pd.read_csv("edgeR-Genes/genelists/upPermBody.csv")
downPermBody = pd.read_csv("edgeR-Genes/genelists/downPermLeg.csv")

fig, axes = plt.subplots()
v = venn2_unweighted(subsets=(len(upPermBody), len(downPermBody), len(body)-len(upPermBody)-len(downPermBody)), set_labels=("Up Regulated", "Down Regulated"), ax=axes)
axes.set_title("Perm Expression in Body Genes")
fig.tight_layout()
fig.savefig("figures/EdgeR/PermBody.png")
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/5fe93b3617ee9f3f4a883ff3abe5fea31b00da79.png]]

*** REFACTOR Venn 8
#+begin_src jupyter-python :session py
genes = pd.read_csv("GeneReference/listofgenes.csv")
upPerm = pd.read_csv("edgeR-Genes/genelists/upPerm.csv")
downPerm = pd.read_csv("edgeR-Genes/genelists/downPerm.csv")

fig, axes = plt.subplots()
v = venn2_unweighted(subsets=(len(upPerm), len(downPerm), len(genes)-len(upPerm)-len(downPerm)), set_labels=("Up Regulated", "Down Regulated"), ax=axes)

axes.set_title("Perm Expression")
fig.tight_layout()
fig.savefig("figures/EdgeR/Perm.png")
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/6d2e3137346f0936f7c1edcd4c2a65671bed165a.png]]

*** Venn 9
Body vs leg EdgeR
#+begin_src jupyter-python :session py
genes = pd.read_csv("GeneReference/listofgenes.csv", header=None)
body = pd.read_csv("edgeR-Genes/bodyExpr.csv")
leg = pd.read_csv("edgeR-Genes/legExpr.csv")
fig, axes = plt.subplots()

v = venn2_unweighted(subsets=(len(body), len(leg),len(genes)-len(leg) - len(body)), set_labels=("Body", "Leg"), ax=axes)
v.get_patch_by_id("10").set_color("blue")
v.get_patch_by_id("11").set_color("blue")
v.get_patch_by_id("01").set_color("grey")
v.get_patch_by_id("01").set_alpha(0.5)
axes.set_title("Leg vs Body")
fig.tight_layout()
fig.savefig("figures/figure2/EdgeR-BodyvsLeg.png", bbox_inches="tight", dpi=250)
fig.savefig("figures/figure2/EdgeR-BodyvsLeg.pdf", bbox_inches="tight", dpi=250)

plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/38b67feca428f2217e85968601099bf697f1bfd5.png]]

** Pearson Correlation
:PROPERTIES:
:header-args: :tangle scripts/pearson-correlation.r
:END:
This correlates the results from edgeR and Deseq2. Using this, the correlation can make the analysis tool interchangeable.
*** Libraries
#+begin_src jupyter-R :session R
library("tidyverse")
library("ggpubr")
#+end_src

#+RESULTS:
#+begin_example
── [1mAttaching packages[22m ─────────────────────────────────────── tidyverse 1.3.1 ──

[32m✔[39m [34mggplot2[39m 3.3.3     [32m✔[39m [34mpurrr  [39m 0.3.4
[32m✔[39m [34mtibble [39m 3.1.2     [32m✔[39m [34mdplyr  [39m 1.0.6
[32m✔[39m [34mtidyr  [39m 1.1.3     [32m✔[39m [34mstringr[39m 1.4.0
[32m✔[39m [34mreadr  [39m 1.4.0     [32m✔[39m [34mforcats[39m 0.5.1

── [1mConflicts[22m ────────────────────────────────────────── tidyverse_conflicts() ──
[31m✖[39m [34mdplyr[39m::[32mfilter()[39m masks [34mstats[39m::filter()
[31m✖[39m [34mdplyr[39m::[32mlag()[39m    masks [34mstats[39m::lag()
#+end_example

*** Import the data
#+begin_src jupyter-R :session R
EdgeR <- read.csv("/home/david/Documents/BenoitLab/RNA-seq/edgeR-Genes/bodyExpr.csv")
Deseq <- read.csv("/home/david/Documents/BenoitLab/RNA-seq/Deseq-Genes/total.csv")
common <- intersect(row.names(Deseq), row.names(EdgeR))
EdgeRCommon <- EdgeR[common, ]
DeseqCommon <- Deseq[common, ]

ECol <- EdgeRCommon["logFC.partbody"]
DCol <- -1*DeseqCommon["log2FoldChange"]
newD <- data.frame(DCol, ECol)
head(newD)
#+end_src

#+RESULTS:
:RESULTS:
A data.frame: 6 × 2

|           | log2FoldChange <dbl> | logFC.partbody <dbl> |
|-----------+----------------------+----------------------|
| dv.10     | 4.460319             | 4.601874             |
| dv.100006 | 2.409308             | 2.510430             |
| dv.10002  | 2.489758             | 2.567744             |
| dv.10003  | 4.760398             | 4.965640             |
| dv.100030 | 1.801994             | 2.086273             |
| dv.100031 | 4.980622             | 4.975215             |
:END:

*** Plot the data
#+begin_src jupyter-R :session R
library("ggpubr")
pearson <- ggscatter(newD, x = "log2FoldChange", y = "logFC.partbody",
          add = "reg.line", conf.int = TRUE,
          cor.coef = TRUE, cor.method = "pearson",
          xlab = "Deseq", ylab = "EdgeR")
pearson
ggsave("/home/david/Documents/BenoitLab/RNA-seq/figures/figure1/pearson.png", pearson, png())
ggsave("/home/david/Documents/BenoitLab/RNA-seq/figures/figure1/pearson.pdf", pearson, pdf())

#+end_src

#+RESULTS:
:RESULTS:
: `geom_smooth()` using formula 'y ~ x'
:
: Saving 6.67 x 6.67 in image
:
: `geom_smooth()` using formula 'y ~ x'
:
: Saving 7 x 7 in image
:
: `geom_smooth()` using formula 'y ~ x'
:
#+attr_org: :width 420 :height 420
[[file:./.ob-jupyter/f1067a6954fd040fbf8de1c030201143a06483aa.png]]
:END:
*** Venn Diagram
Doesn't do what I wanted
#+begin_src jupyter-R :session R
library(VennDiagram)
ECol <- row.names(EdgeR["logFC.partbody"])
DCol <- row.names(-1*Deseq["log2FoldChange"])
venn.diagram(
  x = list(na.omit(ECol), na.omit(DCol)),
  category.names = c("EdgeR", "Deseq"),
  filename = "/home/david/Documents/BenoitLab/RNA-seq/figures/figure1/vennBody.png",
  output=TRUE
)
#+end_src
** Dotplot
:PROPERTIES:
:HEADER-ARGS: :tangle scripts/enrichment-dotplot.py
:END:
This figure plots the enrichment of specific genes. Ideal for small amounts of genes.
*** imports
#+begin_src jupyter-python :session py
import numpy as np
import matplotlib.pyplot as plt
import matplotlib
import pandas as pd
#+end_src
*** Theme settings
#+begin_src jupyter-python :session py
plt.rcParams["font.family"] = "Bahnschrift"
cmap = matplotlib.colors.LinearSegmentedColormap.from_list(
    "", ["dodgerblue", "lightgrey"]
)

#+end_src
*** Import
Use the pandas package to import the csv file
#+begin_src jupyter-python :session py
dotplotdata = pd.read_csv("../GeneReference/dotplotdata.csv")  # infers header existance

pesticide = dotplotdata.Category
pathway = dotplotdata.Pathway
enrichmentratio = dotplotdata.Enrichment
pval = dotplotdata["P-Value"]
#+end_src
*** Plot the figure
#+begin_src jupyter-python :session py
fig, ax = plt.subplots(1)
p = ax.scatter(
    pathway, pesticide, c=pval, s=enrichmentratio * 3, cmap=cmap, vmin=0, vmax=0.05
)
plt.legend(loc="lower left", markerscale=2.0, scatterpoints=1, fontsize=10)
plt.xticks(rotation="vertical")

# Legend:
handles, labels = p.legend_elements(prop="sizes", alpha=0.6, num=4, func=lambda x : x/3)
legend2 = ax.legend(
    handles,
    labels,
    loc="upper right",
    title="Enrichment Ratio",
    bbox_to_anchor=(1.4, 1.1),
)

# Colorbar:
cbar = fig.colorbar(p, shrink=0.5)
cbar.ax.set_ylabel("p Value", rotation=270, labelpad=15)

# Title, labels, and visual modifications:
plt.title("Metabolic Pathway Enrichment")
plt.xlabel("Metabolic Pathway")
plt.ylabel("Pesticide")
ax.grid(axis="x", linestyle="dotted")
ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)

plt.show()
#+end_src
*** Save the Figure
#+begin_src jupyter-python :session py
plt.savefig('dotplot.pdf', dpi=300, bbox_inches='tight')
plt.savefig('dotplot.jpg', dpi=300, bbox_inches='tight')
#+end_src

* Local Variables :noexport:
local variables:
org-export-babel-evaluate: nil
eval: (add-hook 'after-save-hook 'org-html-export-to-html t t)
eval: (add-hook 'after-save-hook 'org-babel-tangle t t)
end:
